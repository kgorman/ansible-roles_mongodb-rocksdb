---
# tasks file for ansible-roles_mongodb-install

# cleanup
- command: rm -rf /mongodb

# ensure base users/groups, and software
- group: name={{ mongodb_group }} state=present
- user: name={{ mongodb_user }} comment="mongodb user" uid=1040 group={{ mongodb_group }}
- yum: name=git state=latest
- yum: name=epel-release state=latest
- yum: name=scons state=latest
- yum: name=python-pip state=latest
- yum: name=numactl state=latest
- yum: name=snappy-devel state=latest
- yum: name=zlib-devel state=latest
- yum: name=bzip2-devel state=latest
- yum: name=gcc-c++ state=latest
- pip: name=pymongo state=latest

# get the source, build up binaries

- git: repo=https://github.com/facebook/rocksdb.git dest=/opt/rocksdbsrc/
- shell: cd /opt/rocksdbsrc; git checkout mongorocks; make static_lib; make install

- shell: rm -rf /opt/mongodbsrc; rm -rf /opt/mongodb; mkdir /opt/mongodb
- git: repo=https://github.com/mongodb-partners/mongo.git dest=/opt/mongodbsrc/
- shell: cd /opt/mongodbsrc; git checkout v3.0-mongorocks; scons all --rocksdb=1 --prefix=/opt/{{ mongodb_binaries_dir }}/bin

- file: path=/opt/{{ mongodb_binaries_dir }} owner={{ mongodb_user }} group={{ mongodb_group }}

# system settings, specific to DB
- shell: echo never > /sys/kernel/mm/transparent_hugepage/enabled
- shell: echo never > /sys/kernel/mm/transparent_hugepage/defrag

# config and init files, directories
- name: Create the mongodb startup file
  template: src=init_mongodb.j2 dest=/etc/init.d/mongodb mode=0655 owner={{ mongodb_user }} group={{ mongodb_group }}

- shell: echo 0 > /proc/sys/vm/zone_reclaim_mode

- name: Create the data directory
  file: path={{ mongodb_datadir_prefix }} state=directory owner={{ mongodb_user }} group={{ mongodb_group }}

- name: Create the config directory
  file: path=/etc/mongodb state=directory owner={{ mongodb_user }} group={{ mongodb_group }}

- name: Create the mongodb configuration file
  template: src=mongodb_conf.j2 dest={{ mongodb_config_location }}{{ mongodb_config_file_name }} mode=0655 owner={{ mongodb_user }} group={{ mongodb_group }}

- name: Create the mongodb keyfile
  template: src=mongodb_keyfile.j2 dest={{ mongodb_config_location }}mongodb_{{ mongodb_port}}.keyfile mode=0700 owner={{ mongodb_user }} group={{ mongodb_group }}

# start it up
- service: name=mongodb state=started

# create an initial DBA user, if auth is enabled we are now secured.
- mongodb_user: database=admin name={{ mongodb_admin_user }} password={{ mongodb_admin_pass }} state=present login_port={{ mongodb_port }} roles="root"

# open firewall for MongoDB connections
- name: open firewall CentOS7+
  command: firewall-cmd --permanent --add-port={{ mongodb_port }}/tcp
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version|int >= 7
- name: reload firewall CentOS 7+
  command: firewall-cmd --reload
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version|int >= 7

- name: open firewall CentOS < 7
  command: /sbin/iptables -I RH-Firewall-1-INPUT 1 -p tcp --dport {{ mongodb_port }} -j ACCEPT
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version|int < 7
- name: reload firewall CentOS < 7
  command: /sbin/service iptables save
  when: ansible_distribution == 'CentOS' and ansible_distribution_major_version|int < 7

# set limits
- name: set up limits.conf
  template: src=limits_conf.j2 dest=/etc/security/limits.conf mode=0600
